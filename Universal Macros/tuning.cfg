######################### TUNING & CALIBRATION MACROS #########################

[gcode_macro PIDBED]
description: PID BED
gcode:
    {% set pidb = params.pidb|default(80.0)|float %} 
    M117 Pid-autotune BED temp:{pidb}
    PID_CALIBRATE HEATER=heater_bed TARGET={pidb}


[gcode_macro PIDEXTRUDER]
description: PID EXTRUDER
gcode:
    {% set pide = params.pide|default(220.0)|float %} 
    M117 Pid-autotune BED extruder:{pide}
    PID_CALIBRATE HEATER=extruder TARGET={pide}

######################### PRESSURE ADVANCE #########################

# This will just set a default value for PA per filament temp. 
# If PS/SS filament gcode sets pressure advance, it will take precendence over this, as it runs after.
# Pretty hacky way to do it, but it works. Better way would probably be to pass filament type as a variable.

[gcode_macro TEMPADJUSTPA]
gcode:
    # ABS
    {% if printer.heater_bed.target >= 100 %}
        SET_PRESSURE_ADVANCE ADVANCE=0.0425
    ## PETG
    #{% elif printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
    #   SET_PRESSURE_ADVANCE ADVANCE=
    # PLA
    {% elif printer.heater_bed.target <= 65 %}
        SET_PRESSURE_ADVANCE ADVANCE=0.035
    # Catch-all
    {% else %}
        SET_PRESSURE_ADVANCE ADVANCE=0.055
    {% endif %}

[gcode_macro DUMP_PARAMETERS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}
